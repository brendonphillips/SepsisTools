% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/permut_tests.R
\name{events_to_num}
\alias{events_to_num}
\title{Converting events vector to numerical (incomplete)}
\usage{
events_to_num(list_, zero_reference = NaN, ...)
}
\arguments{
\item{list_}{list of events of type numeric, bool, string}

\item{zero_reference}{the event to be assigned 0; other events will have the
value 1; if list_ is numeric and no `zero_reference` is given, the numerical
values in the list will be used}

\item{..}{currently ignored}
}
\value{
A numerical vector; either 0/1 or -Inf:Inf, depending on parameters
}
\description{
helper function allowing the permutation test to work on input event vectors 
of various types (string, numeric, boolean) without preprocessing by the user
}
\examples{
# example of numerical vector
ex_num <- c(1, 5, 2, 2, 4, 3, 3, 3, 5, 2, 3, 1, 4, 2, 4)

# no zero reference given -> returns the values given
events_to_num(ex_num)
# zero reference given (and it's in the vector) -> 0/1 vector
events_to_num(ex_num, 4)
# zero reference given (even as a string) -> 0/1 vector
events_to_num(ex_num, "4")
# zero reference given, not in the vector -> first element of the vector
# taken as reference
events_to_num(ex_num, 6)
# zero reference given as string, not in the vector -> first element of the
# vector taken as reference
events_to_num(ex_num, "6")

# example of boolean vector
ex_bool <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE,
             TRUE, FALSE, FALSE, FALSE, TRUE, TRUE)

# # no zero reference given -> original vector returned
# events_to_num(ex_bool)
# zero reference 
# events_to_num(ex_bool, 4)
# events_to_num(ex_bool, "4")
# events_to_num(ex_bool, TRUE)
# events_to_num(ex_bool, "TRUE")

# paste0("c(", paste(sample(1:5, 15, replace = TRUE), collapse = ","), ")")
# paste0("c(", paste(sample(c(T, F), 15, replace = TRUE), collapse = ","), ")")


# # paste0("c(", paste(sample(1:5, 15, replace = TRUE), collapse = ","), ")")
# haha_num <- c(1,5,2,2,4,3,3,3,5,2,3,1,4,2,4)
# 
# events_to_num(haha_num)
# events_to_num(haha_num, 4)
# events_to_num(haha_num, "4")
# events_to_num(haha_num, 6)
# events_to_num(haha_num, "6")
# 
# # paste0("c(", paste(sample(c(T, F), 15, replace = TRUE), collapse = ","), ")")
# haha_bool <- c(TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,TRUE,TRUE)
# events_to_num(haha_bool)
# events_to_num(haha_bool, 4)
# events_to_num(haha_bool, "4")
# events_to_num(haha_bool, TRUE)
# events_to_num(haha_bool, "TRUE")

# # paste0("c('", paste(sample(1:5, 15, replace = TRUE), collapse = "','"), "')")
# haha_num_string <- c('4','3','2','1','2','5','3','2','4','5','3','1','4','5','3')
# 
# # paste0("c('", paste(sample(letters[1:5], 15, replace = TRUE), collapse = "','"), "')")
# haha_string <- c('d','a','e','e','b','d','e', '6','e','e','a','d','e','a','e','d')

# print(haha_map(haha_num))
# print(haha_map(haha_num, 2))

# print(haha_map(haha_num_string))
# print(haha_map(haha_num_string), 7)


# print(haha_map(haha_string))


}
