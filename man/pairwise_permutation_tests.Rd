% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pairwise_permutation_tests.R
\name{pairwise_permutation_tests}
\alias{pairwise_permutation_tests}
\title{Pairwise permutation tests}
\usage{
pairwise_permutation_tests(
  data_,
  ...,
  group_col_name = "group_",
  id_col_name = "id_",
  event_col_name = "event_",
  ntrials = 100,
  parallel = FALSE,
  ranseed = NaN,
  systematic = TRUE,
  na_fill = FALSE,
  backsolve = FALSE,
  compare_to = "placebo",
  p_adj_meths = c("BH"),
  global_test_first = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{data_}{the data set, with at least three features: event (what 
happened), id (who were they), group (what intervention were they 
administered)}

\item{...}{currently ignored}

\item{group_col_name}{the name of the column with `group` information}

\item{id_col_name}{the name of the column with participant/patient `id` 
information}

\item{event_col_name}{the name fo the column with the event (data type 
castable to numerical)}

\item{ntrials}{the number of permutation tests performed (and test 
statistics calculated). currently capped at N!}

\item{parallel}{True/False whether the permutations/test statistics are to 
be calculated serially or in parallel (uses the R snow package)}

\item{ranseed}{a set random seed to be used for the permutations (used for 
reproducibility)}

\item{systematic}{True/False whether the groups are to be grouped or 
distributed totally randomly. For example, should all observations from 
Patient A in group (G1) be permuted to the same group (G2), or can they be 
spread across permuted groups? The first option (TRUE) is endorsed by 
Eleanor, the second option (FALSE) would be in line with other R packages 
(`coin`, for example).}

\item{na_fill}{if any entries in the input table have empty groups, either 
(TRUE) fill them with a generated group name .NA_group, or (FALSE) filter 
those rows out.}

\item{compare_to}{for each pairwise test, the group that will be used for 
comparison}

\item{p_adj_meths}{a list of family corrections to be performed on the series 
of p-values obtained from the pairwise tests. Since this is a call to the 
base p.adjust method, the list of corrections can be found by running 
`?p.adjust.methods`. To summarise here:
* "bonferroni"

* "holm" - Holm method,

* "hochberg"

* "hommel"

* "BH"/"fdr" - Benjamini-Hochberg

* "BY" - Benjamini-Yakutieli

* "none" - a pass-through (i.e., no adjustment to the p values)}

\item{global_test_first}{TRUE/FALSE whether a global permutation test 
should be performed on the data set before the full set of pairwise tests}

\item{verbose}{TRUE/FALSE whether a completion message with stats should be 
printed to the screen whenever the permutation test ends. A progress bar is 
printed in all cases.}
}
\value{
A tibble (data frame) with the columns:

 * `group_name` the non-reference group in the pairwise test (for a global 
 test, "__GlobaL__"),

 * `N_obs` the total number of observations used in each permutation tests 
 (that is, from all included groups),

 * `N_trials` the number of permutations done

 * `p` the p value obtained after performing the corresponding test

 * `error` the Monte Carlo error term calculated for the test

 * `compare_to` the group to be included in all pairwise tests (i.e., a 
 placebo group in a trial)

 * `p_adj_...` the adjusted p value of the test, by each requested method 
 in `p_adj_meths`. The adjusted values form each test are given in different 
 columns, with the name "p_adj_" followed by the name of the method (from 
 p.adjust.methods)
}
\description{
Conducts all possible pairwise permutation tests between the groups in the 
data set given and a given reference group. 

* If requested, the Global permutation test is performed over the entire 
data set, and reported in the result data frame of this function. 

* If family correction method(s) are given, the base R p.adjust routine is
 called to adjust the p.value calculated from the pairwise permutation tests.
 
* Progress bars (from txtProgressBar) are shown in all instances, but a
 `verbose` option (TRUE/FALSE) controls output to the terminal after each 
 test. 

* Given that this function calls the global_permutation_test function on the 
backend (just with different input tables), the only other arguments needed 
(vs the global call) are the `compare_to`, `p_adj_meths` and 
`global_test_first`.
}
\examples{
# load the data set
data(class_performance)

# perform the test  - output a table
output <- pairwise_permutation_tests(class_performance,
                                   group_col_name = group_col_name,
                                   id_col_name = id_col_name,
                                   event_col_name = event_col_name,
                                   ntrials = 1000,
                                   compare_to = "Roth",
                                   parallel = TRUE,
                                   global_test_first = TRUE,
                                   verbose = TRUE,
                                   p_adj_meths = c("BH"),
                                   na_fill = TRUE)

print(output)
# # A tibble: 5 Ã— 8
#  group_name  N_obs N_trials     p   error compare_to p_adj_BH p_adj_holm
#  <chr>       <int>    <int> <dbl>   <dbl> <chr>         <dbl>      <dbl>
# 1 __Global__   3618     1000 0.322 0.0148  NA           NA         NA    
# 2 Grey         1333     1000 0.405 0.0155  Roth          0.54       0.819
# 3 Simpson      1344     1000 0.071 0.00812 Roth          0.284      0.284
# 4 Cumberbatch  1501     1000 0.941 0.00745 Roth          0.941      0.941
# 5 NA           1441     1000 0.273 0.0141  Roth          0.54       0.819
}
